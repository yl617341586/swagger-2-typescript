openapi: 3.0.4
info:
  title: User Management API
  description: 示例 OpenAPI 3.0 规范文档，演示用户管理相关接口
  version: 1.0.0
servers:
  - url: http://api.example.com/v1
paths:
  /users:
    get:
      summary: 获取用户列表
      description: 获取系统中所有用户的基本信息
      parameters:
        - name: page
          in: query
          description: 页码，从 1 开始
          required: false
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          in: query
          description: 每页显示数量
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 成功返回用户列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
    post:
      summary: 创建新用户
      description: 创建一个新用户，需要提供姓名和邮箱
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: 用户创建成功，返回用户详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
components:
  schemas:
    TestUser3:
      $ref: '#/components/TestUser2'
    TestUser2:
      $ref: '#/components/TestUser'
    TestUser:
      $ref: '#/components/UserBase'
    TestArr:
      type: array
      items:
        type: string
    TestArr1:
      type: array
      items:
        $ref: '#/components/UserBase'
    UserBase:
      description: 用户基础信息
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 用户唯一标识符
        name:
          type: string
          description: 用户名，长度不超过 50
          maxLength: 50
        email:
          type: string
          format: email
          description: 用户邮箱
        friend:
          $ref: '#/components/UserBase'
        hobby:
          type: array
          items:
            type: string
        testObj:
          type: object
          properties:
            a:
             type: object
             properties: 
              aa: 
                type: string
            b:
              type: string
            c:
              $ref: '#/components/schemas/UserBase'      
    UserCreateRequest:
      description: 创建用户的请求体
      allOf:
        - $ref: '#/components/schemas/UserBase'
      required:
        - name
        - email
      properties:
        # 覆盖或新增属性（示例：创建时不需要 id）
        id:
          # 这里显式排除 id，因为创建时由系统生成
          nullable: true
    UserDetailResponse:
      description: 用户详情响应
      allOf:
        - $ref: '#/components/schemas/UserBase'
      properties:
        createdAt:
          type: string
          format: date-time
          description: 用户创建时间
        updatedAt:
          type: string
          format: date-time
          description: 用户最后更新时间
    UserListResponse:
      description: 用户列表响应
      type: object
      properties:
        total:
          type: integer
          description: 总用户数
        page:
          type: integer
          description: 当前页码
        pageSize:
          type: integer
          description: 每页显示数量
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserBase'
    UserBase1:
      description: 用户基础信息
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 用户唯一标识符
        name:
          type: string
          description: 用户名，长度不超过 50
          maxLength: 50
        email:
          type: string
          format: email
          description: 用户邮箱
        friend:
          $ref: '#/components/UserBase'
        hobby:
          type: array
          items:
            type: string
        testObj:
          type: object
          properties:
            a:
              type: object
              properties: 
                aa: 
                  type: string
            b:
              type: string
            c:
              $ref: '#/components/schemas/UserBase'   
  responses:
    BadRequest:
      description: 错误请求（参数校验失败等）
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: 错误信息
    Unauthorized:
      description: 未授权（需要身份验证）
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 使用 JWT 令牌进行身份验证